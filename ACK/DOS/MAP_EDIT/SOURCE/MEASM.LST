Turbo Assembler	 Version 3.1	    04/15/94 02:58:53	    Page 1
measm.ASM



      1
      2						 IDEAL
      3						 JUMPS
      4						 include "prologue.mac"
1     5					 P386
1     6
1     7
1     8					 Macro	  SETUPSEGMENT
1     9
1    10					 SEGMENT _TEXT	 PARA PUBLIC 'CODE'
1    11						 ASSUME	 CS:_TEXT
1    12
1    13						 Endm
1    14
1    15					 macro	 PENTER	 STORAGE
1    16					 ;; 17 - Enter a procedue with storage space
1    17					 ;; Procedure enter, uses the 286/386 ENTER opcode
1    18						 push	 ebp
1    19						 mov	 ebp,esp
1    20						 IF	 STORAGE
1    21						 sub	 esp,STORAGE
1    22						 ENDIF
1    23					 ENDIF
1    24						 endm
1    25
1    26					 macro	 PLEAVE
1    27					 ;; 18 - Exit a	procedure with stack correction.
1    28						 mov	 esp,ebp
1    29						 pop	 ebp
1    30						 endm
1    31
1    32					 macro	 PushCREGS
1    33					 ;; 19 - Save registers	for C
1    34						 push	 es
1    35						 push	 ds   ;The Kernel is responsible for maintaining DS
1    36						 push	 esi
1    37						 push	 edi
1    38						 cld
1    39						 endm
1    40
1    41					 macro	 PopCREGS
1    42					 ;; 20 - Restore registers for C
1    43						 pop	 edi
1    44						 pop	 esi
1    45						 pop	 ds ;The Kernel	is responsible for maintaining DS
1    46						 pop	 es
1    47						 endm
1    48
1    49
     50						 P386		 ; 386 specific	opcodes	and shit allowed.
     51						 P387		 ; Allow 386 processor
     52
     53
     54						 MASM
     55	00000000				 .MODEL	FLAT	 ;32-bit OS/2 model
     56	00000000				 .CODE
     57						 IDEAL
Turbo Assembler	 Version 3.1	    04/15/94 02:58:53	    Page 2
measm.ASM



     58
     59						 PUBLIC		 SetPalette2_
     60						 PUBLIC		 SetVGAmode_
     61						 PUBLIC		 SetTextMode_
     62						 PUBLIC		 inkey_
     63						 PUBLIC		 PutHex_
     64
     65					 ;==============================================================================
     66					 ; void	SetPalette2(unsigned char *PalBuf,short	count);
     67					 ;==============================================================================
     68
     69	00000000			 Proc	 SetPalette2_ near
     70	00000000  56				 push	 esi
     71
     72	00000001  8B F0				 mov	 esi,eax
     73	00000003  66| 8B CA			 mov	 cx,dx
     74	00000006  66| BB 0000			 mov	 bx,0
     75	0000000A  FC				 cld
     76	0000000B  66| BA 03C8			 mov	 dx,3C8H
     77	0000000F			 sp210:
     78	0000000F  8A C3				 mov	 al,bl
     79	00000011  EE				 out	 dx,al
     80	00000012  66| 42			 inc	 dx
     81	00000014  AC				 lodsb
     82	00000015  EE				 out	 dx,al
     83	00000016  AC				 lodsb
     84	00000017  EE				 out	 dx,al
     85	00000018  AC				 lodsb
     86	00000019  EE				 out	 dx,al
     87	0000001A  66| 4A			 dec	 dx
     88	0000001C  66| 43			 inc	 bx
     89	0000001E  E2 EF				 loop	 sp210
     90
     91	00000020  5E				 pop	 esi
     92	00000021  C3				 ret
     93	00000022				 endp
     94
     95
     96					 ;==============================================================================
     97					 ; void	SetVGAmode(void);
     98					 ;==============================================================================
     99	00000022			 Proc	 SetVGAmode_  near
    100	00000022  55				 push	 ebp
    101	00000023  66| B8 0013			 mov	 ax,13h
    102	00000027  CD 10				 int	 10h		 ; Set 320x200x256
    103	00000029  5D				 pop	 ebp
    104	0000002A  C3				 ret
    105	0000002B				 endp
    106
    107					 ;==============================================================================
    108					 ;
    109					 ;==============================================================================
    110	0000002B			 Proc	 SetTextMode_ near
    111	0000002B  55				 push	 ebp
    112	0000002C  66| B8 0003			 mov	 ax,3
    113	00000030  CD 10				 int	 10h
    114	00000032  5D				 pop	 ebp
Turbo Assembler	 Version 3.1	    04/15/94 02:58:53	    Page 3
measm.ASM



    115	00000033  C3				 ret
    116	00000034				 endp
    117
    118					 ;==============================================================================
    119					 ;
    120					 ;==============================================================================
    121	00000034			 Proc  inkey_ near
    122	00000034  33 C0				 xor	 eax,eax
    123	00000036  B4 01				 mov	 ah,1		 ;see if key available
    124	00000038  CD 16				 int	 16h
    125	0000003A  74 0B	90 90 90 90		 jz	 ink080		 ;nope
    126	00000040  66| 33 C0			 xor	 ax,ax
    127	00000043  CD 16				 int	 16h
    128	00000045  EB 03				 jmp	 short ink090
    129
    130	00000047			 ink080:
    131	00000047  66| 33 C0			 xor	 ax,ax
    132	0000004A			 ink090:
    133	0000004A  C3				 ret
    134	0000004B				 endp
    135
    136					 ;==============================================================================
    137					 ;
    138					 ;==============================================================================
    139	0000004B			 Proc	 HexOut_ near
    140	0000004B  24 0F				 and	 al,15
    141	0000004D  3C 0A				 cmp	 al,10
    142	0000004F  72 02				 jb	 short hex010
    143	00000051  04 07				 add	 al,7
    144
    145	00000053			 hex010:
    146	00000053  04 30				 add	 al,'0'
    147	00000055  AA				 stosb
    148	00000056  C3				 ret
    149	00000057				 endp
    150
    151					 ;==============================================================================
    152					 ; void	PutHex(char *buf,UINT mCode);
    153					 ;==============================================================================
    154	00000057			 Proc	 PutHex_ near
    155	00000057  57				 push	 edi
    156	00000058  8B F8				 mov	 edi,eax
    157	0000005A  8B C2				 mov	 eax,edx
    158	0000005C  C0 E8	04			 shr	 al,4
    159	0000005F  E8 FFFFFFE7			 call	 HexOut_
    160	00000064  8B C2				 mov	 eax,edx
    161	00000066  E8 FFFFFFE0			 call	 HexOut_
    162	0000006B  32 C0				 xor	 al,al
    163	0000006D  AA				 stosb
    164	0000006E  5F				 pop	 edi
    165	0000006F  C3				 ret
    166	00000070				 endp
    167						 end
Turbo Assembler	 Version 3.1	    04/15/94 02:58:53	    Page 4
Symbol Table




Symbol Name			  Type	 Value

??date				  Text	 "04/15/94"
??filename			  Text	 "measm	  "
??time				  Text	 "02:58:52"
??version			  Number 030A
@32Bit				  Text	 1
@CodeSize			  Text	 0
@Cpu				  Text	 0F8FH
@DataSize			  Text	 0
@FileName			  Text	 measm
@Interface			  Text	 00h
@Model				  Text	 1
@WordSize			  Text	 4
@code				  Text	 FLAT
@curseg				  Text	 _TEXT
@data				  Text	 FLAT
@stack				  Text	 FLAT
HexOut_				  Near	 FLAT:004B
PutHex_				  Near	 FLAT:0057
SetPalette2_			  Near	 FLAT:0000
SetTextMode_			  Near	 FLAT:002B
SetVGAmode_			  Near	 FLAT:0022
hex010				  Near	 FLAT:0053
ink080				  Near	 FLAT:0047
ink090				  Near	 FLAT:004A
inkey_				  Near	 FLAT:0034
sp210				  Near	 FLAT:000F

Macro Name

PENTER
PLEAVE
PopCREGS
PushCREGS
SETUPSEGMENT

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  32  0000 Dword  Public  DATA
FLAT				  Group
_TEXT				  32  0070 Dword  Public  CODE
